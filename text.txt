 async handleUserLeft(user) {
      delete this.remoteUsers[user.uid];
      let item = document.getElementById(`user-container-${user.uid}`);
      if (item) {
        item.remove();
      }

      if (this.userIdInDisplayFrame === `user-container-${user.uid}`) {
        this.displayFrame.style.display = null;

        let videoFrames = document.getElementsByClassName("video__container");

        for (let i = 0; videoFrames.length > i; i++) {
          videoFrames[i].style.height = "300px";
          videoFrames[i].style.width = "300px";
        }
      }
    },

    async toggleMic(e) {
      let button = e.currentTarget;

      if (localTracks[0].muted) {
        await localTracks[0].setMuted(false);
        button.classList.add("active");
      } else {
        await localTracks[0].setMuted(true);
        button.classList.remove("active");
      }
    },

    async toggleCamera(e) {
      let button = e.currentTarget;

      if (localTracks[1].muted) {
        await localTracks[1].setMuted(false);
        button.classList.add("active");
      } else {
        await localTracks[1].setMuted(true);
        button.classList.remove("active");
      }
    },

    async toggleScreen(e) {
      let screenButton = e.currentTarget;
      let cameraButton = document.getElementById("camera-btn");

      if (!sharingScreen) {
        sharingScreen = true;

        screenButton.classList.add("active");
        cameraButton.classList.remove("active");
        cameraButton.style.display = "none";

        this.localScreenTracks = await AgoraRTC.createScreenVideoTrack();

        document.getElementById(`user-container-${this.uid}`).remove();
        this.displayFrame.style.display = "block";

        let player = `<div class="video__container" id="user-container-${this.uid}">
                <div class="video-player" id="user-${this.uid}"></div>
            </div>`;

        this.displayFrame.insertAdjacentHTML("beforeend", player);
        document
          .getElementById(`user-container-${this.uid}`)
          .addEventListener("click", expandVideoFrame);

        this.userIdInDisplayFrame = `user-container-${this.uid}`;
        this.localScreenTracks.play(`user-${this.uid}`);

        await client.unpublish([localTracks[1]]);
        await client.publish([localScreenTracks]);

        let videoFrames = document.getElementsByClassName("video__container");
        for (let i = 0; videoFrames.length > i; i++) {
          if (videoFrames[i].id != this.userIdInDisplayFrame) {
            this.videoFrames[i].style.height = "100px";
            this.videoFrames[i].style.width = "100px";
          }
        }
      } else {
        sharingScreen = false;
        cameraButton.style.display = "block";
        document.getElementById(`user-container-${this.uid}`).remove();
        await client.unpublish([this.localScreenTracks]);

        this.switchToCamera();
      }
    },

    async leaveStream(e) {
      e.preventDefault();

      document.getElementById("join-btn").style.display = "block";
      document.getElementsByClassName("stream__actions")[0].style.display =
        "none";

      for (let i = 0; localTracks.length > i; i++) {
        this.localTracks[i].stop();
        this.localTracks[i].close();
      }

      await client.unpublish([localTracks[0], localTracks[1]]);

      if (this.localScreenTracks) {
        await client.unpublish([this.localScreenTracks]);
      }

      document.getElementById(`user-container-${this.uid}`).remove();

      if (this.userIdInDisplayFrame === `user-container-${this.uid}`) {
        displayFrame.style.display = null;

        for (let i = 0; videoFrames.length > i; i++) {
          this.videoFrames[i].style.height = "300px";
          this.videoFrames[i].style.width = "300px";
        }
      }

      channel.sendMessage({
        text: JSON.stringify({ type: "user_left", uid: this.uid }),
      });
    },


    async updateMemberTotal(members) {
      let total = document.getElementById("members__count");
      total.innerText = members.length;
    },

    async handleMemberLeft(MemberId) {
      this.removeMemberFromDom(MemberId);
      let members = await channel.getMembers();
      this.updateMemberTotal(members);
    },

    async removeMemberFromDom(MemberId) {
      let memberWrapper = document.getElementById(
        `member__${MemberId}__wrapper`
      );
      let name =
        memberWrapper.getElementsByClassName("member_name")[0].textContent;
      this.addBotMessageToDom(`${name} has left the room.`);

      memberWrapper.remove();
    },

    async getMembers() {
      let members = await channel.getMembers();
      this.updateMemberTotal(members);
      for (let i = 0; members.length > i; i++) {
        this.addMemberToDom(members[i]);
      }
    },


     async addMemberToDom(MemberId) {
      let { name } = await rtmClient.getUserAttributesByKeys(MemberId, [
        "name",
      ]);
      let membersWrapper = document.getElementById("member__list");
      let memberItem = `<div class="member__wrapper" id="member__${MemberId}__wrapper">
                        <span class="green__icon"></span>
                        <p class="member_name">${name}</p>
                    </div>`;
      membersWrapper.insertAdjacentHTML("beforeend", memberItem);
    },

    

    async handleChannelMessage(messageData, MemberId) {
      console.log("A new message was received");
      let data = JSON.parse(messageData.text);

      if (data.type === "chat") {
        this.addMessageToDom(data.displayName, data.message);
      }

      if (data.type === "user_left") {
        document.getElementById(`user-container-${data.uid}`).remove();

        if (userIdInDisplayFrame === `user-container-${this.uid}`) {
          this.displayFrame.style.display = null;

          for (let i = 0; videoFrames.length > i; i++) {
            this.videoFrames[i].style.height = "300px";
            this.videoFrames[i].style.width = "300px";
          }
        }
      }
    },
    async sendMessage(e) {
      e.preventDefault();

      let message = e.target.message.value;
      channel.sendMessage({
        text: JSON.stringify({
          type: "chat",
          message: message,
          displayName: displayName,
        }),
      });
      this.addMessageToDom(displayName, message);
      e.target.reset();
    },

    async addMessageToDom(name, message) {
      let messagesWrapper = document.getElementById("messages");
      let newMessage = `<div class="message__wrapper">
                        <div class="message__body">
                            <strong class="message__author">${name}</strong>
                            <p class="message__text">${message}</p>
                        </div>
                    </div>`;

      messagesWrapper.insertAdjacentHTML("beforeend", newMessage);

      let lastMessage = document.querySelector(
        "#messages .message__wrapper:last-child"
      );
      if (lastMessage) {
        lastMessage.scrollIntoView();
      }
    },

    async addBotMessageToDom(botMessage) {
      let messagesWrapper = document.getElementById("messages");

      let newMessage = `<div class="message__wrapper">
                        <div class="message__body__bot">
                            <strong class="message__author__bot">ðŸ¤– Mumble Bot</strong>
                            <p class="message__text__bot">${botMessage}</p>
                        </div>
                    </div>`;

      messagesWrapper.insertAdjacentHTML("beforeend", newMessage);

      let lastMessage = document.querySelector(
        "#messages .message__wrapper:last-child"
      );
      if (lastMessage) {
        lastMessage.scrollIntoView();
      }
    },

    async leaveChannel() {
      await channel.leave();
      await rtmClient.logout();
    },


    
    async switchToCamera() {
      let player = `<div class="video__container" id="user-container-${this.uid}">
                    <div class="video-player" id="user-${this.uid}"></div>
                 </div>`;
      displayFrame.insertAdjacentHTML("beforeend", player);

      await localTracks[0].setMuted(true);
      await localTracks[1].setMuted(true);

      document.getElementById("mic-btn").classList.remove("active");
      document.getElementById("screen-btn").classList.remove("active");

      localTracks[1].play(`user-${this.uid}`);
      await client.publish([localTracks[1]]);
    },
